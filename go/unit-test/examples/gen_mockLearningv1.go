// Code generated by MockGen. DO NOT EDIT.
// Source: mockLearningv1.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMath is a mock of Math interface.
type MockMath struct {
	ctrl     *gomock.Controller
	recorder *MockMathMockRecorder
}

// MockMathMockRecorder is the mock recorder for MockMath.
type MockMathMockRecorder struct {
	mock *MockMath
}

// NewMockMath creates a new mock instance.
func NewMockMath(ctrl *gomock.Controller) *MockMath {
	mock := &MockMath{ctrl: ctrl}
	mock.recorder = &MockMathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMath) EXPECT() *MockMathMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockMath) Add(a, b int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", a, b)
	ret0, _ := ret[0].(int)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockMathMockRecorder) Add(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMath)(nil).Add), a, b)
}

// Multiply mocks base method.
func (m *MockMath) Multiply(a, b int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Multiply", a, b)
	ret0, _ := ret[0].(int)
	return ret0
}

// Multiply indicates an expected call of Multiply.
func (mr *MockMathMockRecorder) Multiply(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Multiply", reflect.TypeOf((*MockMath)(nil).Multiply), a, b)
}
